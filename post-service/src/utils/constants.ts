import dotenv from "dotenv";

if (process.env.NODE_ENV === "production") {
  dotenv.config({ path: ".env.production" });
} else {
  dotenv.config({ path: ".env.development" });
}

export const RABBITMQ_URL = process.env.RABBITMQ_URL || "amqp://localhost:5672/";

export const MESSAGES = {
  DB_CONNECTION_SUCCESS: "Post Service DB Connected",
  DB_CONNECTION_FAILED: "DB Connection Failed",
  REPORTS_FETCH_SUCCESS: "Reports data fetched successfully",
  REPORT_RESOLVED: "Report resolved successfully",
  DASHBOARD_DATA_FETCH_SUCCESS: "Dashboard data fetched successfully",
  INTERNAL_ERROR: "Internal Server Error",
  COMMENT_ADDED: "Comment added successfully",
  COMMENT_DELETED: "Comment deleted successfully",
  COMMENT_EDITED: "Comment updated successfully",
  IMAGE_FILE_NOT_FOUND: "Image File not found",
  USER_NOT_FOUND: "User not found",
  POST_CREATION_ERROR: "Error creating post",
  POST_UPDATE_ERROR: "Error updating post",
  POST_DELETION_ERROR: "Error deleting post",
  COMMENT_ADDITION_ERROR: "Error adding comment",
  COMMENT_DELETION_ERROR: "Error deleting comment",
  ENTITY_NOT_FOUND: "Entity not found",
  REPORT_ADDED_SUCCESS: "Report added successfully",
  REPORT_ADDITION_FAILED: "Failed to add report",
  INVALID_REPORT_TYPE: "Invalid report type",
  UNEXPECTED_ERROR: "An unexpected error occurred",
  ADMIN_JWT_NOT_FOUND: "Admin JWT not found in the cookies",
  JWT_SECRET_NOT_FOUND: "JWT secret not found in the env",
  INVALID_ADMIN_JWT: "Invalid admin JWT",
  JWT_NOT_FOUND: "JWT not found in the cookies",
  INVALID_JWT_ROLE: "Invalid JWT role",

  USER_RESTRICTED: "User is restricted and cannot perform this action",
  INVALID_JWT: "Invalid JWT",
  REPORT_RESOLVED_SUCCESS: "Report is resolved successfully",
  ERROR_FETCHING_REPORTS: "Error fetching reports data",
  ERROR_RESOLVING_REPORT: "Error resolving report",
  ERROR_FETCHING_DASHBOARD_DATA: "Error fetching dashboard card data",
  ERROR_FETCHING_REPORT_COUNT: "Error fetching reports document count",
  COMMENT_ADDED_SUCCESS: "Comment added successfully",
  COMMENT_EDITED_SUCCESS: "Comment edited successfully",
  COMMENT_DELETED_SUCCESS: "Comment deleted successfully",
  COMMENT_NOT_FOUND: "Comment not found",
  ERROR_ADDING_COMMENT: "Error adding comment",
  ERROR_EDITING_COMMENT: "Error editing comment",
  ERROR_DELETING_COMMENT: "Error deleting comment",
  POST_NOT_FOUND: "Post not found",
  POST_ALREADY_DELETED: "This post has already been deleted",
  POST_EDITED_SUCCESSFULLY: "Post edited successfully",
  POST_DELETED_SUCCESSFULLY: "Post deleted successfully from be",
  INVALID_ENTITY_TYPE: "Invalid entity type",
  POST_REMOVED_FROM_BOOKMARK: "Post removed from bookmark successfully",
  POST_ADDED_TO_BOOKMARK: "Post added to bookmark successfully",
  POST_NOT_FOUND_AFTER_UPDATE: "Post not found after update",
  POST_IS_LIKED: "Post is liked",
  POST_IS_NOT_LIKED: "Post is not liked",
  REPORT_NOT_FOUND: "Report not found",
  REPORT_ADDED_SUCCESSFULLY: "Report added successfully",
  USER_ADDED_SUCCESSFULLY: "User data added successfully",
  USER_UPDATED_SUCCESSFULLY: "User data updated successfully",
  REPORT_RESOLVED_SUCCESSFULLY: "Report resolved successfully",
  DASHBOARD_DATA_FETCHED: "Dashboard data fetched successfully",
  REPORT_FETCH_FAILED: "Failed to fetch report data",
  AD_DATA_ADDED_TO_POST: "Ad data added to post data",
  IMAGE_UPLOAD_FAILED: "Failed to upload image",
  POST_EDIT_FAILED: "Failed to edit post",
  POST_DELETE_FAILED: "Failed to delete post",
  POST_LIKE_FAILED: "Failed to toggle like on the post",
  POST_BOOKMARK_FAILED: "Failed to toggle bookmark on the post",
  POST_FETCH_FAILED: "Failed to fetch post",
  POST_NOT_LIKED: "Post not liked by the user",
  POST_NOTIFICATION_FAILED: "Failed to send notification",
  POST_CAPTION_UPDATE_FAILED: "Failed to update caption",
};
